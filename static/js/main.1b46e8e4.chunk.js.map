{"version":3,"sources":["axios.js","Components/Chat/Chat.js","Components/SidebarChat/SidebarChat.js","Components/Sidebar/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Chat","messages","useState","input","setInput","sendMessage","e","a","preventDefault","post","message","name","received","className","Avatar","IconButton","map","Date","timestamp","toString","placeholder","value","onChange","target","onClick","type","SidebarChat","Sidebar","src","App","setMessages","useEffect","get","then","response","data","channel","Pusher","cluster","subscribe","bind","unbind_all","unsubscribe","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1b46e8e4.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://whatsapp-clone1.herokuapp.com\",\n});\n\nexport default instance;\n","import React, { useState } from \"react\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport axios from \"../../axios\";\nimport \"./Chat.scss\";\n\nconst Chat = ({ messages }) => {\n  const [input, setInput] = useState(\"\");\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    await axios.post(\"/messages/new\", {\n      message: input,\n      name: \"John\",\n      received: false,\n    });\n\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <Avatar />\n        <div className=\"chat__headerInfo\">\n          <h3 className=\"chat__title\">Room name</h3>\n          <p className=\"chat__text\"> last seen</p>\n        </div>\n        <div className=\"chat__headerRight\">\n          <IconButton>\n            <SearchIcon />\n          </IconButton>\n          <IconButton>\n            <AttachFileIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"chat__body\">\n        {messages.map((message) => (\n          <p className={`chat__message ${message.received && \"chat__reciver\"}`}>\n            <span className=\"chat__name\">{message.name}</span>\n            {message.message}\n            <span className=\"chat__timestamp\">{new Date(message.timestamp).toString()}</span>\n          </p>\n        ))}\n      </div>\n      <div className=\"chat__footer\">\n        <InsertEmoticonIcon />\n        <form>\n          <input\n            placeholder=\"Type a message\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          />\n          <button onClick={sendMessage} type=\"submit\">\n            Send a message\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport \"./SidebarChat.scss\";\n\nconst SidebarChat = () => {\n  return (\n    <div className=\"sidebarChat\">\n      <Avatar />\n      <div className=\"sidebarChat__info\">\n        <h2 className=\"sidebarChat__title\"> Room name</h2>\n        <p className=\"sidebarChat__text\">message</p>\n      </div>\n    </div>\n  );\n};\n\nexport default SidebarChat;\n","import React from \"react\";\nimport \"./Sidebar.scss\";\n\nimport SidebarChat from \"../SidebarChat/SidebarChat\";\n\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { IconButton, Avatar } from \"@material-ui/core\";\n\nconst Sidebar = () => {\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar src=\"https://i.pinimg.com/originals/a7/61/38/a76138cc495007bbf24aa386947292cc.jpg\" />\n        <div className=\"sidebar__headerRight\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"sidebar__search\">\n        <div className=\"sidebar__searchContainer\">\n          <SearchIcon />\n          <input placeholder=\"Search\" />\n        </div>\n      </div>\n      <div className=\"sidebar__chats\">\n        <SidebarChat />\n        <SidebarChat />\n        <SidebarChat />\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport Chat from \"./Components/Chat/Chat\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Pusher from \"pusher-js\";\nimport axios from \"./axios\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"/messages/sync\").then((response) => {\n      setMessages(response.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    const pusher = new Pusher(\"f0ca0130827f1f38fd8d\", {\n      cluster: \"eu\",\n    });\n\n    const channel = pusher.subscribe(\"messages\");\n    channel.bind(\"inserted\", (data) => {\n      setMessages([...messages, data]);\n    });\n\n    return () => {\n      channel.unbind_all();\n      channel.unsubscribe();\n    };\n  }, [messages]);\n\n  console.log(messages);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__body\">\n        <Sidebar />\n        <Chat messages={messages} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}